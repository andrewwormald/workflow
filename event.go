package workflow

import (
	"github.com/andrewwormald/workflow/workflowpb"
	"github.com/luno/jettison/errors"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/timestamppb"
	"time"
)

type Event struct {
	// ID is a unique ID for the event generated by the event streamer.
	ID int64
	// ForeignID relates to the ForeignID on the Record and WireRecord
	ForeignID string
	// Headers are for header data such as for authentication, trace data, or stack traces.
	Headers map[string]string
	// Body is a proto encoded WireRecord
	Body      []byte
	CreatedAt time.Time
}

func (e *Event) ProtoMarshal() ([]byte, error) {
	pb, err := proto.Marshal(EventToProto(e))
	if err != nil {
		return nil, errors.Wrap(err, "failed to proto marshal event")
	}

	return pb, nil
}

func EventToProto(e *Event) *workflowpb.Event {
	return &workflowpb.Event{
		Id:        e.ID,
		ForeignId: e.ForeignID,
		Headers:   e.Headers,
		Body:      e.Body,
		CreatedAt: timestamppb.New(e.CreatedAt),
	}
}

func UnmarshalEvent(b []byte) (*Event, error) {
	var wpe workflowpb.Event
	err := proto.Unmarshal(b, &wpe)
	if err != nil {
		return nil, errors.Wrap(err, "failed to proto marshal event")
	}

	return &Event{
		ID:        wpe.Id,
		ForeignID: wpe.ForeignId,
		Headers:   wpe.Headers,
		Body:      wpe.Body,
		CreatedAt: wpe.CreatedAt.AsTime(),
	}, nil
}
